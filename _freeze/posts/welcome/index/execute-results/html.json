{
  "hash": "d63114ced74be505d64b787472d85d8c",
  "result": {
    "markdown": "---\ntitle: \"Mapping with ggplot\"\nauthor: \"Amanda R. Hart\"\ndate: \"2020-05-21\"\ncategories: [R, R Graphics]\nhtml: \n  include-after-body: blogfooter.html\n---\n\n\nPost revised 2022-08\n\n## Basics of Mapping\n\nPolygons and shapefiles can be plotted using the `ggplot2` package to create maps.\n\nTo get started there are a few packages to load...\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ ggplot2 3.3.5     ✔ purrr   0.3.4\n✔ tibble  3.1.6     ✔ dplyr   1.0.8\n✔ tidyr   1.2.0     ✔ stringr 1.4.0\n✔ readr   2.1.2     ✔ forcats 0.5.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nRegistered S3 methods overwritten by 'adehabitatMA':\n  method                       from\n  print.SpatialPixelsDataFrame sp  \n  print.SpatialPixels          sp  \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'marmap'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:grDevices':\n\n    as.raster\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'metR'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:purrr':\n\n    cross\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: maps\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'maps'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:purrr':\n\n    map\n```\n:::\n:::\n\n\n... some example data to add to maps...\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- data.frame(longpt =c(-70.3, -72.9, -71.0),\n                  latpt = c(43.7, 41.3, 42.3),\n                  names = c(\"Portland\", \"New Haven\",\"Boston\"),\n                  imagecol = rep(\"https://www.pngmart.com/files/4/Cute-Starfish-PNG-Clipart.png\",3),\n                  stringsAsFactors = FALSE,\n                  year = c(1,2,3))\n```\n:::\n\n\n... and some polygons from the `ggplot2` package to work with.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstates <- map_data(\"state\")\nNEUS <- subset(states, region %in% c(\"massachusetts\",\n                                     \"new hampshire\",\n                                     \"vermont\", \n                                     \"maine\", \n                                     \"rhode island\",\n                                     \"connecticut\"))\nWorld <- map_data(\"world\")\n```\n:::\n\n\nA simple world map can be created by plotting the `World` polygon and specifying a coordinate system using the `coord_map()` function. **Note:** there are many `coord_()` options to choose from.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Start with a world map\nggplot() +\n        geom_polygon(data = World,\n                     aes(x=long, y=lat, group = group),\n                     fill = \"white\",\n                     color = \"black\") +\n        coord_map(xlim = c(-180, 180)) # Here xlim removes horizontal lines due to bug\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){fig-alt='World map' width=672}\n:::\n:::\n\n\nRestrict the geographic region using `coord_fixed()` and add points for three U.S. cities using `geom_point()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n        geom_polygon(data=World,\n                     aes(x = long, y = lat, group = group),\n                     fill = \"white\",\n                     color = \"black\") +\n        geom_point(data = dat, aes(x = longpt, y = latpt), color = \"red\", size = 1) + \n        coord_fixed(xlim = c(-175, -55), ylim = c(9, 80), ratio = 1.2)# Limits lat/long coordinates plotted\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){fig-alt='Map of North Americs' width=672}\n:::\n:::\n\n\nAlternatively, maps may be created by plotting specific state polygons, and `geom_image()` can be used to plot an image rather than points.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNEUS <- ggplot() +\n        geom_polygon(data = NEUS,\n                     aes(x = long, y = lat, group = group),\n                     fill = \"grey\",\n                     color = \"black\") +\n        geom_point(data = dat, aes(x = longpt, y = latpt), color = \"blue\", size = 3) +\n        geom_image(data=dat, mapping = aes(x = longpt, y = latpt, image = imagecol), size = 0.12) + # if size = is inside aes() then you will get an error that \"col\" argument isn't provided\n        theme(panel.background = element_rect(fill = \"steelblue\"))\nNEUS\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){fig-alt='Map of Northeast U.S.' width=672}\n:::\n:::\n\n\n**Note:** without specifying the coordinate system the states appear stretched.\n\n## Inset Maps\n\nMap objects may be layered by treating them as grobs (graphical objects).\n\nTo create an inset map, turn the inset region map into a grob using `ggplotGrob()`. The inset map should include a polygon highlighting the region mapped in the larger map. This can be accomplished using the `geom_path()` function and the latitudinal and longitudinal coordinates highlighted should match the dimensions of the larger map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Highlight region mapped in larger figure\nRegion <- data.frame(long = c(-72, -72, -64, -64, -72),\n                     lat = c(41, 48, 48, 41, 41))\n\n# Inset map \nNorthAmerica <- ggplotGrob(\n        ggplot() +\n        geom_polygon(data = World,\n\n                     aes(x = long, y = lat, group = group),\n\n                     fill = \"grey\",\n\n                     color = \"black\") + \n        coord_fixed(xlim = c(-125, -55), ylim = c(25, 55), ratio = 1.2) +\n        geom_path(data = Region, aes(x = long, y = lat), size = 0.8, color = \"blue\") +\n        theme_bw() +\n        theme(line = element_blank(), text = element_blank(), panel.border = element_rect(color = \"black\", fill = NULL, size = 2), panel.background = element_rect(fill = \"white\"), plot.background = element_rect(fill = \"transparent\", color = NA)))\n```\n:::\n\n\nThen create the larger map that the inset will be added to:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGOM <- ggplot() +\n       geom_polygon(data = World,\n                    aes(x=long, y = lat, group = group),\n                    fill = \"grey\",\n                    color = \"black\") +\n       coord_fixed(xlim = c(-72, -64), ylim = c(41, 48), ratio = 1.2) + # could use world high res data instead\n       theme_minimal()\nGOM\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){fig-alt='Map of Northeast U.S. and Canada' width=672}\n:::\n:::\n\n\nTo complete the inset map, combine the larger map and inset grob. `xmin/xmax` and `ymin/ymax` define the position of the inset map:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nFinalPlot <- GOM +\n        annotation_custom(grob = NorthAmerica, \n                          xmin = -68, xmax = -63.3,\n                          ymin = 45.5, ymax = 49.2) # Determines placement & size of incert\nFinalPlot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){fig-alt='Map of Northeast U.S. and Canada with inset' width=672}\n:::\n:::\n\n\n## Adding Topography\n\nPhysical features like topography and bathymetry may be added as data layers to ggplots.\n\nThe `marmap` package provides access to government NOAA data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBathy <- getNOAA.bathy(lon1 = -75, lon2 = -62,\n                       lat1 = 39, lat2 = 48, resolution = 1)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nQuerying NOAA database ...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThis may take seconds to minutes, depending on grid size\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nBuilding bathy matrix ...\n```\n:::\n\n```{.r .cell-code}\n# Convert data to matrix:\nBathy_Final <- as.matrix(Bathy)\nclass(Bathy_Final) <- \"matrix\"\n\n# Now reshape it to long format and plot\nBathyData <- Bathy_Final %>%\n        as.data.frame() %>%\n        rownames_to_column(var = \"lon\") %>%\n        gather(lat, value, -1) %>%\n        mutate_all(funs(as.numeric))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nPlease use a list of either functions or lambdas: \n\n  # Simple named list: \n  list(mean = mean, median = median)\n\n  # Auto named with `tibble::lst()`: \n  tibble::lst(mean, median)\n\n  # Using lambdas\n  list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\nThis warning is displayed once every 8 hours.\nCall `lifecycle::last_lifecycle_warnings()` to see where this warning was generated.\n```\n:::\n\n```{.r .cell-code}\nhead(BathyData)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        lon lat value\n1 -75.00000  39    -5\n2 -74.98331  39    -7\n3 -74.96662  39    -5\n4 -74.94994  39     1\n5 -74.93325  39    10\n6 -74.91656  39    10\n```\n:::\n:::\n\n\nThe `geom_contour()` function will highlight physical features using bathymetric lines:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBathyData %>%\n        ggplot() +\n        geom_contour(aes(x = lon, y = lat, z = value),\n                     bins = 50, colour = \"black\") + # bins determine # of contours (try 50 vs. 100)\n        geom_polygon(data = World,\n                     aes(x=long, y = lat, group = group),\n                     fill = \"grey\",\n                     color = \"black\") +\n        coord_fixed(xlim = c(-74, -64), ylim = c(40, 47.3), ratio = 1.2) +\n        theme(panel.background = element_rect(fill = \"lightskyblue1\"), line = element_blank())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){fig-alt='Map of Northeast U.S. with bathymetic lines' width=672}\n:::\n:::\n\n\nAlternatively, the `geom_contour_fill()` function may be used to display color-differentiated bathymetric features:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBathyData %>%\n        ggplot() +\n        geom_contour_filled(data = BathyData, aes(x = lon, y = lat, z = value), \n                      breaks = c(0, -50, -100, -200, -300, -400, -500, -5000)) + # breaks determine # of contours\n        scale_fill_manual(values =  c(\"#DEF5E5FF\", \"#A0DFB9FF\", \"#54C9ADFF\", \"#38AAACFF\", \"#348AA6FF\", \"#366A9FFF\", \"#40498EFF\"), name = \"Depth (m)\", labels = c(\"[0,50)\", \"[50,100)\", \"[100, 200)\", \"[200, 300)\", \"[300,400)\", \"[400,500)\", \"[500,5000)\" )) + # Add custom depth colors and legend labels\n        geom_polygon(data = World,\n                     aes(x=long, y = lat, group = group),\n                     fill = \"grey\",\n                     color = \"black\") +\n        coord_fixed(xlim = c(-74, -64), ylim = c(40, 47.3), ratio = 1.2) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){fig-alt='Map of Northeast U.S. with bathymetic features' width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}